const mysql = require('mysql2/promise');

// ========================================
// Êï∞ÊçÆÂ∫ìËøûÊé•ÈÖçÁΩÆÔºàÂ∑≤‰ºòÂåñÔºâ
// ========================================
const dbConfig = {
  // Âü∫Á°ÄÈÖçÁΩÆ
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'Hota@123456',
  database: process.env.DB_NAME || 'gunt_db',
  port: process.env.DB_PORT || 3306,
  
  // Â≠óÁ¨¶ÈõÜÂíåÊó∂Âå∫
  charset: 'utf8mb4',
  timezone: '+00:00',
  dateStrings: true,
  
  // ========================================
  // ËøûÊé•Ê±†‰ºòÂåñÈÖçÁΩÆ
  // ========================================
  
  // ËøûÊé•Ê±†ÈÖçÁΩÆ
  waitForConnections: true,              // ËøûÊé•Ê±†Êª°Êó∂Á≠âÂæÖËÄå‰∏çÊòØÁ´ãÂç≥Êä•Èîô
  connectionLimit: 20,                    // ÊúÄÂ§ßËøûÊé•Êï∞ÔºàÊ†πÊçÆÊúçÂä°Âô®ÈÖçÁΩÆË∞ÉÊï¥Ôºâ
  maxIdle: 10,                            // ÊúÄÂ§ßÁ©∫Èó≤ËøûÊé•Êï∞
  idleTimeout: 60000,                     // Á©∫Èó≤ËøûÊé•Ë∂ÖÊó∂Êó∂Èó¥Ôºà60ÁßíÔºâ
  queueLimit: 0,                          // Á≠âÂæÖÈòüÂàóÈïøÂ∫¶ÈôêÂà∂Ôºà0=Êó†ÈôêÂà∂Ôºâ
  
  // ËøûÊé•‰øùÊ¥ª
  enableKeepAlive: true,                  // ÂêØÁî®TCP keepalive
  keepAliveInitialDelay: 0,               // keepaliveÂàùÂßãÂª∂ËøüÔºà0=Á´ãÂç≥ÂºÄÂßãÔºâ
  
  // ÊÄßËÉΩ‰ºòÂåñ
  multipleStatements: false,              // Á¶ÅÁî®Â§öËØ≠Âè•Êü•ËØ¢ÔºàÂÆâÂÖ®ËÄÉËôëÔºâ
  namedPlaceholders: true,                // ÂêØÁî®ÂëΩÂêçÂç†‰ΩçÁ¨¶
  
  // ËøûÊé•Ë∂ÖÊó∂ËÆæÁΩÆ
  connectTimeout: 10000,                  // ËøûÊé•Ë∂ÖÊó∂Ôºà10ÁßíÔºâ
  acquireTimeout: 10000,                  // Ëé∑ÂèñËøûÊé•Ë∂ÖÊó∂Ôºà10ÁßíÔºâ
  timeout: 60000,                         // Êü•ËØ¢Ë∂ÖÊó∂Ôºà60ÁßíÔºâ
  
  // SSLÈÖçÁΩÆÔºàÁîü‰∫ßÁéØÂ¢ÉÂª∫ËÆÆÂêØÁî®Ôºâ
  // ssl: {
  //   rejectUnauthorized: false
  // },
  
  // Ë∞ÉËØïÊ®°ÂºèÔºàÂºÄÂèëÁéØÂ¢ÉÂèØÂêØÁî®Ôºâ
  debug: process.env.DB_DEBUG === 'true' ? ['ComQueryPacket', 'RowDataPacket'] : false,
};

// ÂàõÂª∫ËøûÊé•Ê±†
const pool = mysql.createPool(dbConfig);

// ========================================
// ËøûÊé•Ê±†‰∫ã‰ª∂ÁõëÂê¨ÔºàÁõëÊéßÂíåÊó•ÂøóÔºâ
// ========================================

// ÁõëÂê¨ËøûÊé•Ëé∑Âèñ
pool.on('acquire', (connection) => {
  if (process.env.DB_DEBUG === 'true') {
    console.log('üìä [DB] ËøûÊé•Â∑≤Ëé∑Âèñ, ID:', connection.threadId);
  }
});

// ÁõëÂê¨ËøûÊé•ÈáäÊîæ
pool.on('release', (connection) => {
  if (process.env.DB_DEBUG === 'true') {
    console.log('üì§ [DB] ËøûÊé•Â∑≤ÈáäÊîæ, ID:', connection.threadId);
  }
});

// ÁõëÂê¨ËøûÊé•ÈòüÂàó
pool.on('enqueue', () => {
  if (process.env.DB_DEBUG === 'true') {
    console.log('‚è≥ [DB] Á≠âÂæÖÂèØÁî®ËøûÊé•...');
  }
});

// ========================================
// ËøûÊé•Ê±†ÂÅ•Â∫∑Ê£ÄÊü•
// ========================================

async function checkPoolHealth() {
  try {
    const connection = await pool.getConnection();
    await connection.ping();
    connection.release();
    return true;
  } catch (error) {
    console.error('‚ùå [DB] ËøûÊé•Ê±†ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•:', error.message);
    return false;
  }
}

// ÂÆöÊúüÂÅ•Â∫∑Ê£ÄÊü•ÔºàÊØè30ÁßíÔºâ
setInterval(async () => {
  const isHealthy = await checkPoolHealth();
  if (!isHealthy) {
    console.warn('‚ö†Ô∏è [DB] ËøûÊé•Ê±†‰∏çÂÅ•Â∫∑ÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆÂ∫ìËøûÊé•');
  }
}, 30000);

// ========================================
// ÊÖ¢Êü•ËØ¢Êó•ÂøóËÆ∞ÂΩï
// ========================================

const originalExecute = pool.execute.bind(pool);
pool.execute = async function(...args) {
  const startTime = Date.now();
  try {
    const result = await originalExecute(...args);
    const duration = Date.now() - startTime;
    
    // ËÆ∞ÂΩïÊÖ¢Êü•ËØ¢ÔºàË∂ÖËøá1ÁßíÔºâ
    if (duration > 1000) {
      console.warn(`‚ö†Ô∏è [DB] ÊÖ¢Êü•ËØ¢ (${duration}ms):`, args[0].substring(0, 100));
    }
    
    return result;
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`‚ùå [DB] Êü•ËØ¢Â§±Ë¥• (${duration}ms):`, error.message);
    throw error;
  }
};

async function initDatabase() {
  try {
    const connection = await pool.getConnection();

    // ÂàõÂª∫Âü∫Á°ÄË°®
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS machines (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) UNIQUE NOT NULL,
        machineGroup VARCHAR(255),
        lineCode VARCHAR(255),
        status VARCHAR(50) DEFAULT 'Ê≠£Â∏∏',
        oee DECIMAL(3,2) DEFAULT 0.85,
        coefficient DECIMAL(5,2) DEFAULT 1.00,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    await connection.execute(`
      CREATE TABLE IF NOT EXISTS orders (
        id INT AUTO_INCREMENT PRIMARY KEY,
        machine VARCHAR(255) NOT NULL,
        orderNo VARCHAR(255) NOT NULL,
        materialNo VARCHAR(255),
        materialName VARCHAR(255) NOT NULL,
        quantity INT NOT NULL,
        priority INT DEFAULT 1,
        startDate DATE NOT NULL,
        expectedEndDate DATE,
        delayedExpectedEndDate DATE,
        actualEndDate DATE,
        reportedQuantity INT DEFAULT 0,
        dailyReports JSON,
        status VARCHAR(50) DEFAULT 'Êú™ÂºÄÂßã',
        isUrgent BOOLEAN DEFAULT FALSE,
        isPaused BOOLEAN DEFAULT FALSE,
        pausedDate DATE,
        resumedDate DATE,
        delayReason TEXT,
        producedDays INT DEFAULT 0,
        remainingDays INT DEFAULT 0,
        originalOrderId INT,
        orderComponent VARCHAR(255),
        componentDescription TEXT,
        isSubmitted BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE KEY unique_machine_order (machine, orderNo)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    await connection.execute(`
      CREATE TABLE IF NOT EXISTS materials (
        id INT AUTO_INCREMENT PRIMARY KEY,
        category VARCHAR(255) NOT NULL,
        feature VARCHAR(255),
        modelThickness VARCHAR(255),
        actualTakt INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    await connection.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        role VARCHAR(20) DEFAULT 'user',
        permissions JSON,
        allowedMachines JSON,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    await connection.execute(`
      CREATE TABLE IF NOT EXISTS production_reports (
        id INT AUTO_INCREMENT PRIMARY KEY,
        orderId INT NOT NULL,
        shiftName VARCHAR(50) NOT NULL,
        reportDate DATE NOT NULL,
        quantity INT NOT NULL DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE KEY unique_report (orderId, shiftName, reportDate)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    await connection.execute(`
      CREATE TABLE IF NOT EXISTS shifts (
        id INT AUTO_INCREMENT PRIMARY KEY,
        machineId INT NOT NULL,
        name VARCHAR(50) NOT NULL,
        sortOrder INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE KEY unique_machine_shift (machineId, name)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    // Ê∑ªÂä†ÂÖ¨Âè∏Â≠óÊÆµÔºàÂÆâÂÖ®ÊñπÂºèÔºâ
    const addColumnSafely = async (table, column, definition) => {
      try {
        await connection.execute(`ALTER TABLE ${table} ADD COLUMN ${column} ${definition}`);
      } catch (error) {
        if (error.code !== 'ER_DUP_FIELDNAME') {
          throw error;
        }
      }
    };

    await addColumnSafely('users', 'companyId', 'VARCHAR(50) DEFAULT "hetai-logistics"');
    await addColumnSafely('users', 'companyName', 'VARCHAR(100) DEFAULT "ÂíåÊ≥∞ÈìæËøê"');
    await addColumnSafely('machines', 'companyId', 'VARCHAR(50) DEFAULT "hetai-logistics"');
    await addColumnSafely('orders', 'companyId', 'VARCHAR(50) DEFAULT "hetai-logistics"');
    await addColumnSafely('materials', 'companyId', 'VARCHAR(50) DEFAULT "hetai-logistics"');
    await addColumnSafely('production_reports', 'companyId', 'VARCHAR(50) DEFAULT "hetai-logistics"');
    await addColumnSafely('shifts', 'companyId', 'VARCHAR(50) DEFAULT "hetai-logistics"');
    
    // OPC UA Áõ∏ÂÖ≥Â≠óÊÆµ
    await addColumnSafely('machines', 'opcuaEnabled', 'BOOLEAN DEFAULT FALSE');
    await addColumnSafely('machines', 'opcuaEndpoint', 'VARCHAR(500)');
    await addColumnSafely('machines', 'opcuaNodeId', 'VARCHAR(255)');
    await addColumnSafely('machines', 'opcuaUsername', 'VARCHAR(100)');
    await addColumnSafely('machines', 'opcuaPassword', 'VARCHAR(255)');
    await addColumnSafely('machines', 'realtimeData', 'JSON');
  await addColumnSafely('machines', 'lastOpcuaUpdate', 'TIMESTAMP NULL');
  await addColumnSafely('machines', 'autoAdjustOrders', 'BOOLEAN DEFAULT TRUE');

    // ÂàõÂª∫ÈªòËÆ§Áî®Êà∑ - ÂíåÊ≥∞ÈìæËøê
    const [existingAdmin] = await connection.execute('SELECT id FROM users WHERE username = ?', ['admin']);
    if (existingAdmin.length === 0) {
      await connection.execute(
        'INSERT INTO users (username, password, role, permissions, allowedMachines, companyId, companyName) VALUES (?, ?, ?, ?, ?, ?, ?)',
        ['admin', 'admin123', 'admin', JSON.stringify(['all']), JSON.stringify(['all']), 'hetai-logistics', 'ÂíåÊ≥∞ÈìæËøê']
      );
    }

    const [existingUser] = await connection.execute('SELECT id FROM users WHERE username = ?', ['user']);
    if (existingUser.length === 0) {
      await connection.execute(
        'INSERT INTO users (username, password, role, permissions, allowedMachines, companyId, companyName) VALUES (?, ?, ?, ?, ?, ?, ?)',
        ['user', 'user123', 'user', JSON.stringify(['orders.read', 'machines.read', 'board']), JSON.stringify(['all']), 'hetai-logistics', 'ÂíåÊ≥∞ÈìæËøê']
      );
    }

    const [existingOperator] = await connection.execute('SELECT id FROM users WHERE username = ?', ['operator']);
    if (existingOperator.length === 0) {
      await connection.execute(
        'INSERT INTO users (username, password, role, permissions, allowedMachines, companyId, companyName) VALUES (?, ?, ?, ?, ?, ?, ?)',
        ['operator', 'op123', 'user', JSON.stringify(['orders.write', 'machines.read', 'board']), JSON.stringify(['all']), 'hetai-logistics', 'ÂíåÊ≥∞ÈìæËøê']
      );
    }

    // ÂàõÂª∫ÂíåÊ≥∞Êú∫ÁîµÁöÑÂàùÂßãÁÆ°ÁêÜÂëòË¥¶Êà∑
    const [existingMechAdmin] = await connection.execute('SELECT id FROM users WHERE username = ? AND companyId = ?', ['mech-admin', 'hetai-mechanical']);
    if (existingMechAdmin.length === 0) {
      await connection.execute(
        'INSERT INTO users (username, password, role, permissions, allowedMachines, companyId, companyName) VALUES (?, ?, ?, ?, ?, ?, ?)',
        ['mech-admin', 'admin123', 'admin', JSON.stringify(['all']), JSON.stringify(['all']), 'hetai-mechanical', 'ÂíåÊ≥∞Êú∫Áîµ']
      );
    }

    const [existingMechUser] = await connection.execute('SELECT id FROM users WHERE username = ? AND companyId = ?', ['mech-user', 'hetai-mechanical']);
    if (existingMechUser.length === 0) {
      await connection.execute(
        'INSERT INTO users (username, password, role, permissions, allowedMachines, companyId, companyName) VALUES (?, ?, ?, ?, ?, ?, ?)',
        ['mech-user', 'admin123', 'user', JSON.stringify(['orders.read', 'machines.read', 'board']), JSON.stringify(['all']), 'hetai-mechanical', 'ÂíåÊ≥∞Êú∫Áîµ']
      );
    }



    // ‰∏∫Áé∞ÊúâÊú∫Âè∞ÂàõÂª∫ÈªòËÆ§Áè≠Ê¨°ÔºàÂè™Âú®‰∏çÂ≠òÂú®Êó∂ÂàõÂª∫Ôºâ
    const [machines] = await connection.execute('SELECT id FROM machines');
    for (const machine of machines) {
      await connection.execute('INSERT IGNORE INTO shifts (machineId, name, sortOrder) VALUES (?, ?, ?)', [machine.id, 'ÁôΩÁè≠', 1]);
      await connection.execute('INSERT IGNORE INTO shifts (machineId, name, sortOrder) VALUES (?, ?, ?)', [machine.id, 'Â§úÁè≠', 2]);
    }

    connection.release();
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê');
  } catch (error) {
    console.error('‚ùå Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•:', error);
  }
}

module.exports = { 
  pool, 
  initDatabase,
  checkPoolHealth 
};