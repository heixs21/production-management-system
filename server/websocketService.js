const WebSocket = require("ws");
const opcuaManager = require("./opcuaService");

class WebSocketService {
  constructor() {
    this.wss = null;
    this.clients = new Set();
  }

  // ÂàùÂßãÂåñ WebSocket ÊúçÂä°Âô®
  initialize(server) {
    this.wss = new WebSocket.Server({
      server,
      path: "/ws/machine-status",
    });

    this.wss.on("connection", (ws, req) => {
      console.log(`üîå Êñ∞ÁöÑ WebSocket ËøûÊé•: ${req.socket.remoteAddress}`);
      this.clients.add(ws);

      // ÂèëÈÄÅÊ¨¢ËøéÊ∂àÊÅØ
      ws.send(
        JSON.stringify({
          type: "connection",
          message: "Â∑≤ËøûÊé•Âà∞Êú∫Âè∞Áä∂ÊÄÅÂÆûÊó∂Êé®ÈÄÅÊúçÂä°",
          timestamp: new Date().toISOString(),
        })
      );

      // Â§ÑÁêÜÂÆ¢Êà∑Á´ØÊ∂àÊÅØ
      ws.on("message", (message) => {
        try {
          const data = JSON.parse(message);
          console.log("Êî∂Âà∞ÂÆ¢Êà∑Á´ØÊ∂àÊÅØ:", data);

          // ÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÂ§ÑÁêÜ‰∏çÂêåÁ±ªÂûãÁöÑÂÆ¢Êà∑Á´ØËØ∑Ê±Ç
          if (data.type === "ping") {
            ws.send(
              JSON.stringify({
                type: "pong",
                timestamp: new Date().toISOString(),
              })
            );
          }
        } catch (error) {
          console.error("Â§ÑÁêÜ WebSocket Ê∂àÊÅØÂ§±Ë¥•:", error);
        }
      });

      // Â§ÑÁêÜËøûÊé•ÂÖ≥Èó≠
      ws.on("close", () => {
        console.log("üîå WebSocket ËøûÊé•Â∑≤ÂÖ≥Èó≠");
        this.clients.delete(ws);
      });

      // Â§ÑÁêÜÈîôËØØ
      ws.on("error", (error) => {
        console.error("WebSocket ÈîôËØØ:", error);
        this.clients.delete(ws);
      });

      // ÂøÉË∑≥Ê£ÄÊµã
      ws.isAlive = true;
      ws.on("pong", () => {
        ws.isAlive = true;
      });
    });

    // ÂÆöÊúüÊ∏ÖÁêÜÊ≠ªËøûÊé•ÔºàÊØè30ÁßíÔºâ
    setInterval(() => {
      this.wss.clients.forEach((ws) => {
        if (ws.isAlive === false) {
          console.log("üîå Ê∏ÖÁêÜÊ≠ªËøûÊé•");
          this.clients.delete(ws);
          return ws.terminate();
        }
        ws.isAlive = false;
        ws.ping();
      });
    }, 30000);

    // Ê≥®ÂÜå OPC UA Áä∂ÊÄÅÊõ¥Êñ∞ÂõûË∞É
    opcuaManager.onStatusUpdate((machineId, statusData) => {
      this.broadcastMachineStatus(statusData);
    });

    console.log("‚úÖ WebSocket ÊúçÂä°Â∑≤ÂàùÂßãÂåñ");
  }

  // ÂπøÊí≠Êú∫Âè∞Áä∂ÊÄÅÁªôÊâÄÊúâÂÆ¢Êà∑Á´Ø
  broadcastMachineStatus(statusData) {
    const message = JSON.stringify({
      type: "machine-status-update",
      data: statusData,
      timestamp: new Date().toISOString(),
    });

    let sentCount = 0;
    this.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message);
        sentCount++;
      }
    });

    if (sentCount > 0) {
      console.log(
        `üì° Â∑≤Âêë ${sentCount} ‰∏™ÂÆ¢Êà∑Á´ØÊé®ÈÄÅÊú∫Âè∞ ${statusData.machineName} ÁöÑÁä∂ÊÄÅÊõ¥Êñ∞`
      );
    }
  }

  // ÂêëÁâπÂÆöÂÆ¢Êà∑Á´ØÂèëÈÄÅÊ∂àÊÅØ
  sendToClient(ws, data) {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(data));
    }
  }

  // ÂÖ≥Èó≠ÊâÄÊúâËøûÊé•
  closeAll() {
    this.clients.forEach((client) => {
      client.close();
    });
    this.clients.clear();

    if (this.wss) {
      this.wss.close();
    }
  }
}

// Âçï‰æãÊ®°Âºè
const websocketService = new WebSocketService();

module.exports = websocketService;
